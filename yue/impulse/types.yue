inspect = (v) ->
  oinspect = vim?.inspect or require "inspect"

  oinspect v, { newline: "@", indent: "++" }

iter_rtext = (content = {}) ->
  texts = if content.rich_text
    content.rich_text
  else
    content.text

  unless texts -- probably not gonna happen
    return "no usable content in #{ inspect content }"

  txt = {}
  for i, v in ipairs texts
    tc = v.plain_text
    href = v.href if v.href != vim.NIL

    with? v.annotations
      if .bold
        tc = "**#{ tc }**"
      if .italic
        tc = "_#{ tc }_"
      if .underline
        tc = "<ins>#{ tc }</ins>"
      if .strikethrough
        tc = "~~#{ tc }~~"
      if .code
        tc = "`#{ tc }`"
      -- no color kthx

    unless href
      txt[] = "#{ tc }"
    else
      txt[] = "[#{ tc }](#{ href })"

  txt

get_file_link = (content) ->
  if content.type == "external"
    content.external.url
  else
    content.file.url

class Block
  new: (type, properties = {}) =>
    @can_md = false
    @type = type
    @properties = properties
    @children = properties.children or {}

    if @properties
      @content = @properties[@type]

  get_id: => @properties.id
  has_children: => @properties.has_children
  to_md: => error "unsupported block->md"

-- absolutely no idea what to do with these
class Unsupported extends Block
  new: (props) =>
    super "unsupported", props
  to_md: => "[unsupported-#{ @\get_id! }](impulse://unsupported/#{ @\get_id! })"

class Paragraph extends Block
  new: (props) =>
    super "paragraph", props
    @can_md = true

  to_md: =>
    table.concat (iter_rtext @content)

class Heading1 extends Block
  new: (props) =>
    super "heading_1", props
    @can_md = true

  to_md: =>
    table.concat {
      "# "
      ...iter_rtext @content
    }

class Heading2 extends Block
  new: (props) =>
    super "heading_2", props
    @can_md = true

  to_md: =>
    table.concat {
      "## "
      ...iter_rtext @content
    }

class Heading3 extends Block
  new: (props) =>
    super "heading_3", props
    @can_md = true

  to_md: =>
    table.concat {
      "### "
      ...iter_rtext @content
    }

class BulletedListItem extends Block
  new: (props) =>
    super "bulleted_list_item", props
    @can_md = true

  to_md: =>
    "* #{ @content.rich_text[1].plain_text }"

class NumberedListItem extends Block
  new: (props) =>
    super "numbered_list_item", props
    @can_md = true

  to_md: =>
    -- these will be auto-renumbered iirc
    -- it is ugly tho
    "1. #{ table.concat (iter_rtext @content) }"

class ToDo extends Block
  new: (props) =>
    super "to_do", props
    @can_md = true

  to_md: =>
    check = @content.checked and "x" or " "
    "- [#{ check }] #{ table.concat (iter_rtext @content) }"

class Toggle extends Block
  new: (props) =>
    super "toggle", props
    @can_md = true

  to_md: =>
    table.concat (iter_rtext @content)

class ChildPage extends Block
  new: (props) =>
    super "child_page", props
    @can_md = true

  to_md: =>
    "[#{ @content.title }](impulse://page/#{ @\get_id! })"

class ChildDatabase extends Block
  new: (props) =>
    super "child_database", props
    @can_md = true

  to_md: =>
    "[#{ @content.title }](impulse://database/#{ @\get_id! })"

class Embed extends Block
  new: (props) =>
    super "embed", props
    @can_md = true

  to_md: =>
    "[embed-#{ @\get_id! }](#{ @content.url })"

class Image extends Block
  new: (props) =>
    super "image", props
    @can_md = true

  to_md: =>
    link = if @content.type == "external"
      @content.external.url
    else
      @content.file.url

    "![image-#{ @get_id! }](#{ get_file_link @content })"

class Video extends Block
  new: (props) =>
    super "video", props
    @can_md = true

  to_md: =>
    "[video-#{ @get_id! }](#{ get_file_link @content })"

class File extends Block
  new: (props) =>
    super "file", props
    @can_md = true

  to_md: =>
    "[file-#{ @get_id! }](#{ get_file_link @content })"

class Pdf extends Block
  new: (props) =>
    super "pdf", props
    @can_md = true

  to_md: =>
    "[pdf-#{ @get_id! }](#{ get_file_link @content })"

class Bookmark extends Block
  new: (props) =>
    super "bookmark", props
    @can_md = true

  to_md: =>
    "[bookmark-#{ @\get_id! }](#{ @content.url })"

class Callout extends Block
  new: (props) =>
    super "callout", props
    @can_md = true

  to_md: =>
    "> #{ inspect (iter_rtext @content) }"

class Quote extends Block
  new: (props) =>
    super "quote", props
    @can_md = true

  to_md: =>
    "> #{ table.concat (iter_rtext @content) }"

class Equation extends Block
  new: (props) =>
    super "equation", props
    @can_md = true

  to_md: =>
    {
      "```impulse://equation/#{ @\get_id! }"
      "#{ @content.expression }"
      "```"
    }

class Divider extends Block
  new: (props) =>
    super "divider", props
    @can_md = true

  to_md: =>
    "-------"

class TableOfContents extends Block
  new: (props) =>
    super "table_of_contents", props
    @can_md = true

  to_md: =>
    --"TableOfContents #{ inspect @properties }"
    -- skip this for now; it'd require deferring and parsing the whole doc,
    -- which i don't really feel like doing
    nil

class Column extends Block
  new: (props) =>
    super "column", props
    @can_md = true

  to_md: =>
    --"column: #{ inspect @content }"
    -- skip this for now; not sure how to represent this
    nil

class ColumnList extends Block
  new: (props) =>
    super "column_list", props
    @can_md = true

  to_md: =>
    --"ColumnList: #{ inspect @content }"
    -- skip this for now; not sure how to represent this
    nil

class LinkPreview extends Block
  new: (props) =>
    super "link_preview", props
    @can_md = true

  to_md: =>
    "[link-preview](#{ @content.url })"

class SyncedBlock extends Block
  new: (props) =>
    super "synced_block", props
    @can_md = true

  to_md: =>
    "[start-synced-block](impulse://block/#{ @\get_id! })"

class Template extends Block
  new: (props) =>
    super "template", props
    @can_md = true

  to_md: =>
    "[template-#{ @\get_id! }](impulse://template/#{ @\get_id! }) ++ #{ inspect @content }"

class LinkToPage extends Block
  new: (props) =>
    super "link_to_page", props
    @can_md = true

  to_md: =>
    "[linktopage-#{ @\get_id! }](#{ inspect @content })"

class Table extends Block
  new: (props) =>
    super "table", props
    @can_md = true

  to_md: => nil

class TableRow extends Block
  new: (props) =>
    super "table_row", props
    @can_md = true

  to_md: =>
    cells = @content.cells

    r = {}
    for v in *cells
      for vv in *v
        r[] = vv.plain_text

    "| #{ (table.concat r, " | ") } |"

class Code extends Block
  new: (props) =>
    super "code", props
    @can_md = true

  to_md: =>
    {
      "```#{ @content.language }"
     ...iter_rtext @content
      "```"
    }

types =
  paragraph: Paragraph
  heading_1: Heading1
  heading_2: Heading2
  heading_3: Heading3
  bulleted_list_item: BulletedListItem
  numbered_list_item: NumberedListItem
  to_do: ToDo
  toggle: Toggle
  code: Code
  child_page: ChildPage
  child_database: ChildDatabase
  embed: Embed
  image: Image
  video: Video
  file: File
  pdf: Pdf
  bookmark: Bookmark
  callout: Callout
  quote: Quote
  equation: Equation
  divider: Divider
  table_of_contents: TableOfContents
  column: Column
  column_list: ColumnList
  link_preview: LinkPreview
  synced_block: SyncedBlock
  template: Template
  link_to_page: LinkToPage
  table: Table
  table_row: TableRow
  unsupported: Unsupported

export default {
  :types
  to_type: (typ, props) ->
    unless types[typ]
      error "unsupported block type #{ typ }"

    types[typ] props
}
