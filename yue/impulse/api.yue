import "plenary.curl" as curl

class Notion
  @base_url: "https://api.notion.com"
  @timeout: 30
  @page_size: 100

  new: (api_key) =>
    @api_key = api_key

  _request: (api, method = "GET", body = nil, timeout = @@timeout) =>
    opt =
      url: "#{ @@base_url }/#{ api }"
      accept: "application/json"
      :method
      headers:
        ["user-agent"]: "impulse.nvim-0.1-alpha"
        ["x-req-by"]: "impulse.nvim"
        ["content-type"]: "application/json"
        authorization: "Bearer #{ @api_key }"
        ["notion-version"]: "2022-02-22"

    if body
      opt.body = vim.json.encode body

    resp = curl.request opt
    unless resp.status == 200
      return error "unable to make request to #{ api }"

    vim.json.decode resp.body

  -- get_page: retrieve a page's properties
  -- this does NOT get content of the page; use `get_blocks` with the page ID.
  get_page: (id) =>
    @\_request "v1/pages/#{ id }"

  -- update_page: update a page's properties
  update_page: (id, data = nil) =>
    @\_request "v1/pages/#{ id }", "PATCH", data

  -- get_block: retrieve a single block
  get_block: (id) =>
    @\_request "v1/blocks/#{ id }"

  -- get_blocks: retrieve all child blocks of a block.
  -- essentially, a page == a block, so you can use this to get a page's content.
  get_blocks: (parent_id, start_cursor = 0, page_size = @@page_size) =>
    qs = "page_size=#{ page_size }"
    qs ..= "&start_cursor=#{ start_cursor }" if start_cursor > 0

    @\_request "v1/blocks/#{ parent_id }/children?#{ qs }"

  -- search: search & filter all pages and databases matching a query
  search: (query = "", filter = nil) =>
    unless filter
      filter =
        property: "object"
        value: "page"

    -- will need to support pagination
    @\_request "v1/search", "POST", { :query, :filter }

export default Notion
